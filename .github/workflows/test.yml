name: Test CI

on:
  workflow_run: 
    workflows: [ 'Build CI' ]
    types: [completed]

  workflow_dispatch:
jobs:
                
  prt_build_and_upload:
    runs-on: ubuntu-latest
    steps:


      


      - name: Checking out PR code
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: '0'
          # This is to get the PR code instead of the repo code
          ref: ${{ github.event.pull_request.head.sha }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        name: Checking out main code
        #if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: '0'


      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "archive-bin"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/myartifact.zip`, Buffer.from(download.data));


      - name: 'Unzip artifact'
        run: |
          unzip -o myartifact.zip
          ls -l
          cat cli_attestattion_JVL_salt_unsigned.json


      - name: 'Verifying the attestation'
        run: |
          #!/usr/bin/bash
          echo " "
          echo "-------"
          echo "Calculating sha256sum for binary $ARTIFACTS_LOCATION/$BIN_FILE) ..."
          ATT_ID=$(cat att.id)
          echo "CCCCCCCCCCCCCCCCCCCCCCCCC"
          echo ATT_ID=$ATT_ID

          
          echo Downloading SALT ....
          curl -sLO https://get.xygeni.io/latest/salt/salt.zip
          unzip salt.zip -d ./salt_pro
          shopt -s expand_aliases
          alias salt=$PWD/salt_pro/xygeni_salt/salt


          #pwd
          #ls -l
          sha256sum ./JavaVulnerableLab.war | cut -f1 -d ' '
          SHA_SUM=$(sha256sum ./JavaVulnerableLab.war | cut -f1 -d ' ')
          echo $SHA_SUM
          echo YYYYYYYYYYYYYYYYYYYYYYYYYYY
          #ATT_ID=$(echo $(salt -q registry search --digest sha256:$SHA_SUM --format json) | jq -r .[-1].gitoidSha256)
          echo "ATT_ID: $ATT_ID"
          echo ZZZZZZZZZZZZZZZZZZZZZZZZZZZ


          echo " "
          echo "-------"
          # Download the provenance attestation
          echo "Downloading the provenance attestation ..." 
          salt -q reg get --id=$ATT_ID --format=json > ${GITHUB_WORKSPACE}/provenance_kk.signed.json
          cat ${GITHUB_WORKSPACE}/provenance_kk.signed.json
          
          
          # this is for provenance
          #WFR=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json |base64 -d | jq -r .predicate.buildDefinition.internalParameters.environment.GITHUB_WORKFLOW_REF)
          
          # this is for attestation
          #WFR=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json |base64 -d | jq -r .predicate.attestations[1].predicate.variables.GITHUB_WORKFLOW_REF)
          
          #echo "WFR-------"$WFR"--------"
          #echo $WFR | grep cicd_top10_3_salt\/.github\/workflows\/build.yml
          #RES=$?
          #echo "RES-------"$RES"--------"

          echo ====================================
          DIGEST=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json | base64 -d | jq -r .subject)
          
          echo DIGEST_ATT $DIGEST
          DIGEST_CALC=$(sha256sum ./JavaVulnerableLab.war | cut -f1 -d ' ')
          echo DIGEST_CALC $DIGEST_CALC
          SUBJECT_NAME=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json | base64 -d | jq -r .subject.name)
          echo SUBJECT_NAME $SUBJECT_NAME
          echo ATT_ID && cat ./bin/att.id
          echo ====================================
          exit 1

          #SHA_ATT_MATERIAL=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json | base64 -d | jq -r .predicate.attestations[0].predicate.materials[].digest[])
          #SHA_STEP_MATERIAL=$(jq -r .payload ${GITHUB_WORKSPACE}/provenance_kk.signed.json | base64 -d | jq -r .predicate.attestations[3].predicate.materials[0].digest[])
          #echo "SHA_ATT_MATERIAL $SHA_ATT_MATERIAL"
          #echo "SHA_STEP_MATERIAL $SHA_STEP_MATERIAL"
          #if [ "\$SHA_ATT_MATERIAL" = "\$SHA_STEP_MATERIAL" ]; then
          #    echo " "
          #else                 
          #    echo Salt - Attestations FAILED !!
          #    echo Salt - Materials are different !!
          #    exit 1
          #fi

          echo " "
          echo "-------"
          echo "Verifying provenance ..."
          # This should pass (the certificate is the same, and the file digest matches)
          salt verify \
              --basedir ${GITHUB_WORKSPACE} \
              --attestation=${GITHUB_WORKSPACE}/provenance_kk.signed.json \
              --public-key=${GITHUB_WORKSPACE}/Test1_public.pem \
              --file ./JavaVulnerableLab.war

             #--basedir $ARTIFACTS_LOCATION \
             #--public-key=${WORKSPACE}/cert_${JOB_BASE_NAME}.pem \

      
    
      - name: Building ... 
        run: |
          exit 1
          java -version
          mvn -version
          #apt-get update ; apt-get install maven default-jdk -y ; update-alternatives --config javac
          mvn clean package 
          ls -l target/*.war
        #env:
        #  PR_TITLE: ${{github.event.pull_request.title}}
