name: Build CI

on: 
  pull_request_target: 
    branches: [ main ]

  workflow_dispatch:
    inputs:
      mod-source:
          type: boolean
          description: Modify sources
          default: false

env:
  MY_SECRET: ${{ secrets.MY_SECRET }}
  GITHUB_PAT: ${{ secrets.GH_PAT }}
  PR_ID: ${{github.event.number}}

  XY_USERNAME: ${{ secrets.XY_USERNAME_PRO }}
  XY_PASSWORD: ${{ secrets.XY_PASSWORD_PRO }}
  XY_URL: ${{ secrets.XY_URL_PRO }}
  XY_TOKEN: ${{ secrets.XY_TOKEN_PRO }}

  XY_PRJ_NAME: LGV-GH-${{ github.event.repository.name }}
  PIPELINE: ${{ github.event.repository.name }}
  PRIVATE_KEY: ${{ secrets.SALT_PRIVATE_KEY }}
  KEY_PASSWD: ${{ secrets.SALT_PRIVATE_KEY_PASSWD }}
  API_KEY: ${{ secrets.XY_TOKEN_PRO }}
  OTRA_VAR: "hola"
  BASE_DIR: ${{ github.workspace }}

  MODIFY_SOURCES: ${{ github.event.inputs.mod-source }}
  
jobs:
                
  prt_build_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out PR code
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: '0'
          # This is to get the PR code instead of the repo code
          ref: ${{ github.event.pull_request.head.sha }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        name: Checking out main code
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          # Default: 1
          fetch-depth: '0'

      
      - name: Download Xygeni Scanner 
        run: |
          exit 0
          echo Downloading Xygeni Scanner .....
          curl -L https://get.xygeni.io/latest/scanner/install.sh | /bin/bash -s -- -t $XY_TOKEN -s $XY_URL -d ${BASE_DIR}/scanner 
          
          cat ${BASE_DIR}/scanner/conf/codetampering/ccm/workflow_modification.yml | grep changeTypesToConsider
          sed -i 's/changeTypesToConsider: M/changeTypesToConsider: AM/g' ${BASE_DIR}/scanner/conf/codetampering/ccm/workflow_modification.yml
          cat ${BASE_DIR}/scanner/conf/codetampering/ccm/workflow_modification.yml | grep changeTypesToConsider

      # Runs a set of commands using the runners shell
      - name: Execution Xygeni Scanner (vuln)
        run: |
          exit 0
          echo Executing Xygeni scan ....    
          #${BASE_DIR}/scanner/xygeni scan --never-fail -f none --no-conf-download \
          #      --run="inventory,deps,misconf,codetamper" \
          #      --sbom=${BASE_DIR}/sbom_cyclonedx.json --sbom-format=cyclonedx \
          #      -n ${{ env.XY_PRJ_NAME }} --dir ${BASE_DIR} -e **/scanner/**

          ${BASE_DIR}/scanner/xygeni scan --never-fail -f json -o kk.json --no-conf-download \
                --run="inventory,deps,misconf,codetamper" \
                --sbom=${BASE_DIR}/sbom_cyclonedx.json --sbom-format=cyclonedx \
                -n ${{ env.XY_PRJ_NAME }} --dir ${BASE_DIR} -e **/scanner/**      

          ls -ltr
          
          #cat ${BASE_DIR}/sbom_cyclonedx.json
          
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}




      - name: Building ... 
        run: |
          exit 0
          #mkdir ./bin
          #touch ./bin/mybin.exe
          #echo "${{github.event.pull_request.title}}" > ./bin/PR_TITLE.txt
          #echo "$PR_ID" > ./bin/PR_ID.txt
          #ls -lR 
          java -version
          mvn -version
          #apt-get update ; apt-get install maven default-jdk -y ; update-alternatives --config javac
          mvn clean package 
          ls -l target/*.war
        #env:
        #  PR_TITLE: ${{github.event.pull_request.title}}
 
      
      - name: Download SALT
        run: |
              #!/usr/bin/env bash
              echo Downloading SALT ....
              curl -sLO https://get.xygeni.io/latest/salt/salt.zip
              unzip salt.zip -d ./salt_pro
              shopt -s expand_aliases
              alias salt=$PWD/salt_pro/xygeni_salt/salt
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      
      #- name: Calc SHA for bin and add as zip to the artifact
      #  run: |
      #          #!/usr/bin/env bash
      #          #pwd
      #          #ls -l
      #          #cd bin
      #          #ls -l
      #          #sha256sum <(find . -type f -exec sha256sum {} \; | sort)
      #            zip -r ./bin.zip ./bin
      #          cp ./bin.zip ./bin
      #          SHA_SUM=$(sha256sum ./bin.zip | cut -f1 -d ' ')
      #          echo $SHA_SUM


      - name: Generating attestation
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}
        run: |
              #!/usr/bin/env bash
              
              java -version
              mvn -version
              
              shopt -s expand_aliases
              alias salt=$PWD/salt_pro/xygeni_salt/salt

              echo " "
              echo "-----------"
              echo "Intiating the attestation with attestors git and env ..."
              #/home/luisgarcia/LGV/xygeni_salt/salt attestation init 
              salt attestation init \
                            --pipeline ${PIPELINE}_cli \
                            --basedir ${BASE_DIR} \
                            --attestor environment \
                            --attestor git
              
              echo " "
              echo "-----------"
              echo "Adding materials [src/$SRC_FILE]  to attestation ..."
              salt attestation add \
                            --pipeline ${PIPELINE}_cli \
                            --basedir ${BASE_DIR} \
                            --name=my_top_material --type material --file ./src  

              echo " "
              echo "-----------"
              echo "REMOVING binaries ... -------------------" 
              rm -rf ${BASE_DIR}/bin


              
              if [ "$MODIFY_SOURCES" == "true" ]; then
                echo " "
                echo "-----------"
                echo "Tampering with source code AFTER checkout and BEFORE compilation"
                cp ./AddPage_mod.java ./src/main/java/org/cysecurity/cspf/jvl/controller/AddPage.java
              else                 
                echo " "
              fi

              cp ./AddPage_mod.java ./src/main/java/org/cysecurity/cspf/jvl/controller/AddPage.java

              echo " "
              echo "----------- "
              echo "Compiling ... -------------------"
              mkdir ${BASE_DIR}/bin
              salt attestation run \
                            --step=compile \
                            --pipeline ${PIPELINE}_cli \
                            --pretty-print \
                            --name my_sources --type material --file ${BASE_DIR}/src \
                            --name my_product --type product  --file ${BASE_DIR}/target/JavaVulnerableLab.war \
                            -- mvn --no-transfer-progress clean package
 
              

                # echo "----------- "
                # echo "Generating SBOM ... -------------------"
                # salt attestation run \
                #               --step=GenerateSBOM \
                #               --pipeline ${PIPELINE}_cli \
                #               --pretty-print \
                #               --name my_manifest --type material --file ${BASE_DIR}/pom.xml \
                #               --name my_sbom --type product  --file ${BASE_DIR}/sbom_cyclonedx.json \
                #               -- ${BASE_DIR}/scanner/xygeni scan --never-fail -f none --no-conf-download --run="inventory,deps,misconf,codetamper" --sbom=${BASE_DIR}/sbom_cyclonedx.json --sbom-format=cyclonedx -n ${{ env.XY_PRJ_NAME }} --dir ${BASE_DIR} -e **/scanner/**

                #               echo " "
                #               echo "------------"
                #               echo "Adding Xygeni sbom to attestation ..."
                #               salt attestation add \
                #                 --pipeline ${PIPELINE}_cli \
                #                 --basedir ${BASE_DIR} \
                #                 -n xygeni-sbom -t predicate -f ./sbom_cyclonedx.json \
                #                 --predicate-type https://cyclonedx.org/bom

                #               echo " "
                #               echo "------------"
                #               echo "Adding Xygeni scan vulns to attestation ..."
                #               salt attestation add \
                #                 --pipeline ${PIPELINE}_cli \
                #                 --basedir ${BASE_DIR} \
                #                 -n xygeni-vulns -t predicate -f ./deps.kk.json \
                #                 --predicate-type https://in-toto.io/attestation/vulns

              echo " "
              echo "-----------"
              echo "Adding product [bin/$BIN_FILE] to attestation ..."
              cp target/JavaVulnerableLab.war ./bin
              salt -nb attestation add \
                                --pipeline ${PIPELINE}_cli \
                                --basedir ${BASE_DIR}/target \
                                --name=MyAppWar --type product --file JavaVulnerableLab.war 

              #echo " "
              #echo "------------"
              #echo "Checking the status of the drafted attestation  ..."
              #salt -nb attestation status -p ${PIPELINE}_cli --full


              echo " "
              echo "------------"
              echo "Commiting the drafted attestation using provided keys ..."
              salt attestation commit \
                                    --project SALT \
                                    --pipeline ${PIPELINE}_cli \
                                    --key="${PRIVATE_KEY}" --public-key=${BASE_DIR}/Test1_public.pem --key-password=${KEY_PASSWD} \
                                    --output=${BASE_DIR}/${PIPELINE}_cli.signed.json \
                                    --output-unsigned=${BASE_DIR}/cli_attestattion_${PIPELINE}_unsigned.json \
                                    --pretty-print \
                                    > ${GITHUB_WORKSPACE}/lgv.txt
        
                                    #--config=$SALT_PATH/conf/salt.yaml \


              cat ${BASE_DIR}/cli_attestattion_${PIPELINE}_unsigned.json 
              DIGEST=$(cat ${BASE_DIR}/cli_attestattion_${PIPELINE}_unsigned.json | jq -r .subject  )
              

              
              cat ${BASE_DIR}/lgv.txt
              echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
              
              grep "registry with id" lgv.txt | awk '{print $14}' > ./bin/att.id
              cat ./bin/att.id
              cp ${BASE_DIR}/cli_attestattion_${PIPELINE}_unsigned.json ./bin

              echo ====================================
              echo DIGEST $DIGEST
              echo ATT_ID && cat ./bin/att.id
              echo ====================================
        
              
              
      - name: Generating provenance
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}
        run: |
              #!/usr/bin/env bash
              exit 0    
              
              shopt -s expand_aliases
              alias salt=$PWD/salt_pro/xygeni_salt/salt
              
      
              echo " "
              echo "-----------"
              echo "Generating Provenance with CLI ..."
              #$SALT_PATH/salt at provenance 
              salt at slsa \
                  --basedir ${BASE_DIR} \
                  --key="${PRIVATE_KEY}" --public-key=${BASE_DIR}/Test1_public.pem --key-password=${KEY_PASSWD} \
                  --output-unsigned=${BASE_DIR}/cli_provenance_${PIPELINE}_unsigned.json \
                  --pipeline ${PIPELINE} --pretty-print \
                  --file ./bin/bin.zip \
                  > ${BASE_DIR}/lgv.txt
      
              cat ${BASE_DIR}/cli_provenance_${PIPELINE}_unsigned.json
              cat ${BASE_DIR}/lgv.txt
              echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
              
              grep "registry with id" lgv.txt | awk '{print $14}' > ./bin/att.id

              
      


      - name: Archive building artifacts
        uses: actions/upload-artifact@v3
        with:
          name: archive-bin
          path: |
            bin


